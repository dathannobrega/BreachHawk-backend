"""
Django settings for breachhawk project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from datetime import timedelta
from pathlib import Path

from core.logging_conf import configure_logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR.parent))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "unsafe-secret-key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# all hosts allowed

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "leaks",
    "accounts",
    "billing",
    "companies",
    "notifications",
    "scrapers",
    "sites",
    "corsheaders",  # Added for CORS support
]

MIDDLEWARE = [
    # Add CORS middleware at the top of middleware list
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "breachhawk.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "breachhawk.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get(
            "DJANGO_DB_ENGINE", "django.db.backends.postgresql"
        ),
        "NAME": os.environ.get(
            "DJANGO_DB_NAME", str(BASE_DIR / "db.sqlite3")
        ),
        "USER": os.environ.get("DJANGO_DB_USER", "admin"),
        "PASSWORD": os.environ.get("DJANGO_DB_PASSWORD", "strongpassword"),
        "HOST": os.environ.get("DJANGO_DB_HOST", "localhost"),
        "PORT": os.environ.get("DJANGO_DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "MinimumLengthValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "CommonPasswordValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "NumericPasswordValidator"
        ),
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
# Em DEBUG, fa√ßa o Django procurar a pasta <projeto>/static
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files (User uploaded content)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Custom user model
AUTH_USER_MODEL = "accounts.PlatformUser"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    )
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=int(os.environ.get("ACCESS_TOKEN_LIFETIME", "60"))
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=int(os.environ.get("REFRESH_TOKEN_LIFETIME_DAYS", "1"))
    ),
}

# Additional application settings
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://redis:6379/1")
CELERY_RESULT_BACKEND = os.environ.get(
    "CELERY_RESULT_BACKEND", "redis://redis:6379/2"
)
MONGODB_URI = os.environ.get("MONGODB_URI", "mongodb://mongo:27017")
MONGODB_DB = os.environ.get("MONGODB_DB", "breach_db")
MONGODB_USER = os.environ.get("MONGODB_USER", "admin")
MONGODB_PASS = os.environ.get("MONGODB_PASS", "strongpassword")
TOR_CONTROL_PORT = int(os.environ.get("TOR_CONTROL_PORT", "9051"))
TOR_CONTROL_PASSWORD = os.environ.get(
    "TOR_CONTROL_PASSWORD", "SUA_SENHA_FORTE"
)
TOR_MAX_RETRIES = int(os.environ.get("TOR_MAX_RETRIES", "3"))
TOR_RETRY_INTERVAL = float(os.environ.get("TOR_RETRY_INTERVAL", "5.0"))
TOR_PROXY = os.environ.get("TOR_PROXY", "socks5://tor:9050")
SMTP_HOST = os.environ.get("SMTP_HOST", "smtp.seuservidor.com")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SMTP_USER = os.environ.get("SMTP_USER", "avisos@meudominio.com")
SMTP_PASS = os.environ.get("SMTP_PASS", "senhaforte123!")
PASSWORD_MIN_LENGTH = int(os.environ.get("PASSWORD_MIN_LENGTH", "8"))
PASSWORD_REQUIRE_UPPERCASE = os.environ.get(
    "PASSWORD_REQUIRE_UPPERCASE", "True"
) == "True"
PASSWORD_REQUIRE_LOWERCASE = os.environ.get(
    "PASSWORD_REQUIRE_LOWERCASE", "True"
) == "True"
PASSWORD_REQUIRE_NUMBERS = os.environ.get(
    "PASSWORD_REQUIRE_NUMBERS", "True"
) == "True"
PASSWORD_REQUIRE_SYMBOLS = os.environ.get(
    "PASSWORD_REQUIRE_SYMBOLS", "True"
) == "True"
SESSION_TIMEOUT_HOURS = int(os.environ.get("SESSION_TIMEOUT_HOURS", "24"))
MAX_LOGIN_ATTEMPTS = int(os.environ.get("MAX_LOGIN_ATTEMPTS", "5"))
ACCOUNT_LOCKOUT_MINUTES = int(os.environ.get("ACCOUNT_LOCKOUT_MINUTES", "30"))
FRONTEND_URL = os.environ.get("FRONTEND_URL", "http://localhost")
STRIPE_API_KEY = os.environ.get("STRIPE_API_KEY", "")
DJANGO_DB_ENGINE = os.environ.get(
    "DJANGO_DB_ENGINE", "django.db.backends.sqlite3"
)

# Configure logging
configure_logging()

# CORS Settings
SESSION_COOKIE_SAMESITE = "None"
SESSION_COOKIE_SECURE = True

# Get CORS allowed origins from environment variable
cors_origins_env = os.environ.get("CORS_ALLOWED_ORIGINS", "http://localhost:3000")
CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins_env.split(",")]

# Get CSRF trusted origins from environment variable
csrf_origins_env = os.environ.get("CSRF_TRUSTED_ORIGINS", "http://localhost:3000")
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in csrf_origins_env.split(",")]

CORS_ALLOW_ALL_ORIGINS = False  # Allow all origins in development
CORS_ALLOW_CREDENTIALS = True  # Allow cookies in cross-origin requests
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
